
# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.2-apache-stretch-node-browsers
      - image: circleci/mysql:8.0.4
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: sekoliko
          MYSQL_USER: root
          MYSQL_PASSWORD: password

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Install things we need
          command: |
            sudo apt-get update
            sudo apt-get install -y libzip-dev libpng-dev
            sudo apt-get install -y zlib1g-dev libicu-dev g++
            sudo apt-get install default-mysql-client
            mysql -h 127.0.0.1 -u root -e "CREATE DATABASE sekoliko;"

      - run:
          name: Install PHP exts
          command: |
            sudo docker-php-ext-install zip
            sudo docker-php-ext-configure intl
            sudo docker-php-ext-install intl
            sudo docker-php-ext-install pdo_mysql

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Symfony depedencies install
          command: |
            cp .env.test .env
            composer install
            php bin/console doctrine:schema:update --force

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-

      - run:
          name: Install webpack depedencies
          command: |
            yarn install

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules