
# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.2-apache-stretch-node-browsers
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: sekoliko
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_PASSWORD:

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - run:
          name: Install things we need
          command: |
            sudo apt-get update
            sudo apt-get install -y libzip-dev libpng-dev
            sudo apt-get install -y zlib1g-dev libicu-dev g++
            sudo apt-get install mysql-client
            sudo apt-get -y install mysql-server

      - run:
          name: Install PHP exts
          command: |
            sudo docker-php-ext-install zip
            sudo docker-php-ext-configure intl
            sudo docker-php-ext-install intl
            sudo docker-php-ext-install pdo_mysql

      - run:
          name: Fix MySQL socket config
          command: |
            sudo sh -c "echo 'pdo_mysql.default_socket=/var/run/mysqld/mysqld.sock' > /usr/local/etc/php/conf.d/pdo.ini"

      - run:
          name: Start database server
          command: |
            sudo service mysql start
            sleep 2
            ps aux | grep mysql

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Symfony depedencies install
          command: |
            cp .env.test .env
            composer install

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-

      - run:
          name: Install webpack depedencies
          command: |
            yarn install

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules